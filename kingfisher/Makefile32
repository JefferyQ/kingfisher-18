
ASM_SOURCES=arch/x86/boot.s arch/x86/cpuid.s
ASM_OBJS=$(patsubst %.s, build/%.o, $(ASM_SOURCES))
C_SOURCES=
C_OBJS=$(patsubst %.c, build/%.o, $(C_SOURCES))

KERNELIMAGE=kingfisher.elf32

CC=gcc
CPP=g++
AS=nasm
LD=ld

CFLAGS=-nostdlib -fno-builtin -fno-stack-protector -m32 -ffreestanding
CPPFLAGS=
LDFLAGS=-melf_i386 -Tlink32.ld
ASFLAGS=-felf32

QUIET_AS         = @echo '   ' AS '   ' $@;
QUIET_CC         = @echo '   ' CC '   ' $@;
QUIET_LINK       = @echo '   ' LINK ' ' $@;
QUIET_AR         = @echo '   ' AR '   ' $@;
QUIET_SO         = @echo '   ' SO '   ' $@;

all: prereq $(ASM_OBJS) $(C_OBJS) ${KERNELIMAGE} multiboot_check

.phony rebuild: clean all

prereq:
	mkdir -p ./build
	mkdir -p ./build/arch/x86

clean:
	@echo ' rm ${KERNELIMAGE} '; rm -f ${KERNELIMAGE};
	@echo ' rm build tree '; rm -rf build

${KERNELIMAGE}: $(ASM_OBJS) $(C_OBJS)
	$(QUIET_LINK) $(LD) $(LDFLAGS) -o $@ $(ASM_OBJS) $(C_OBJS)

build/%.o: %.s
	$(QUIET_AS) $(AS) $(ASFLAGS) $< -o $@

build/%.o: %.c
	$(QUIET_CC) $(CC) $(CFLAGS) $< -o $@

build/%.o: %.cpp
	$(QUIET_CPP) $(CPP) $(CPPFLAGS) $< -o $@

multiboot_check: ${KERNELIMAGE}
	./third_party/mbchk/mbchk ${KERNELIMAGE}

